#!/usr/bin/env python
import os
from litellm import completion
from dotenv import load_dotenv
import json
from puzzle_environment import PuzzleEnvironment
from agent_tools import AgentToolbox, generate_tool_schema
from mcp_server import create_mcp_server


def create_tool_interface(use_mcp=False):
    """
    Vytvo≈ô√≠ rozhran√≠ pro n√°stroje - buƒè p≈ôes MCP server nebo p≈ô√≠mou class.
    Vrac√≠ tuple (tools_schemas, available_tools, puzzle_env).
    """
    if use_mcp:
        # Pou≈æij MCP server
        mcp_server = create_mcp_server()
        mcp_tools = mcp_server.get_tools()
        
        # P≈ôeveƒè MCP tools na form√°t pro litellm
        tools_schemas = []
        for tool in mcp_tools:
            schema = {
                "type": "function",
                "function": {
                    "name": tool["name"],
                    "description": tool["description"],
                    "parameters": tool["inputSchema"]
                }
            }
            tools_schemas.append(schema)
        
        # Vytvo≈ô√≠m wrapper funkce pro MCP vol√°n√≠
        def create_mcp_wrapper(tool_name):
            def wrapper(**kwargs):
                result = mcp_server.call_tool(tool_name, kwargs)
                if result.get("isError", False):
                    return result["content"][0]["text"]
                return result["content"][0]["text"]
            wrapper.__name__ = tool_name
            return wrapper
        
        available_tools = {tool["name"]: create_mcp_wrapper(tool["name"]) for tool in mcp_tools}
        puzzle_env = mcp_server.puzzle_env
        
    else:
        # Pou≈æij p≈ô√≠mou class
        puzzle_env = PuzzleEnvironment()
        toolbox = AgentToolbox(puzzle_env)
        
        tools_to_register = [toolbox.get_current_state, toolbox.move_across_river, toolbox.check_if_solved]
        tools_schemas = [generate_tool_schema(func) for func in tools_to_register]
        available_tools = {func.__name__: func for func in tools_to_register}
    
    return tools_schemas, available_tools, puzzle_env


if __name__ == "__main__":
    load_dotenv()

    MODEL = (
        os.environ.get("MODEL")
        if os.environ.get("MODEL") is not None
        else "openrouter/openai/gpt-4-turbo"
    )

    MAX_STEP = (
        int(os.environ.get("MAX_STEP"))
        if os.environ.get("MAX_STEP") is not None
        else 15
    )

    USE_MCP = os.environ.get("USE_MCP", "false").lower() == "true"

    system_prompt = (
        "Jsi expert na logick√© h√°danky. Tv√Ωm √∫kolem je vy≈ôe≈°it h√°danku 'Vlk, koza a zel√≠' krok za krokem."
        "C√≠lem je dostat vlka, kozu a zel√≠ na prav√Ω b≈ôeh."
        "üö´ ABSOLUTN√ç Z√ÅKAZY:\n"
        "- ZAK√ÅZ√ÅNO: Ukonƒçovat pr√°ci textovou odpovƒõd√≠ bez vol√°n√≠ n√°stroje!\n"
        "- ZAK√ÅZ√ÅNO: Odpov√≠dat u≈æivateli p≈ô√≠mo!\n"
        "- ZAK√ÅZ√ÅNO: Ukonƒçovat pr√°ci bez 100% potvrzen√≠ vy≈ôe≈°en√≠!\n\n"
        "‚úÖ POVINN√â CHOV√ÅN√ç:\n"
        "- V KA≈ΩD√âM kroku MUS√ç≈† zavolat n√°stroj\n"
        "- NIKDY nesm√≠≈° vr√°tit pouze textovou odpovƒõƒè\n"
        "- Pokud si nejsi jist co dƒõlat, zavolej `get_current_state`\n"
        "- Pokud chce≈° ukonƒçit pr√°ci, MUS√ç≈† nejprve zavolat `check_if_solved`\n"
        "üìã ALGORITMUS ≈òE≈†EN√ç:\n"
        "1. Zavolej `get_current_state` pro zji≈°tƒõn√≠ aktu√°ln√≠ho stavu\n"
        "2. Analyzuj stav a polohu loƒèky\n"
        "3. Zavolaj `move_across_river` s vybran√Ωm pasa≈æ√©rem (wolf/goat/cabbage/nothing)\n"
        "4. Opakuj kroky 1-3, dokud nejsou v≈°ichni na prav√©m b≈ôehu\n"
        "5. Kdy≈æ si mysl√≠≈°, ≈æe je hotovo, zavolaj `check_if_solved`\n"
        "6. Pouze pokud `check_if_solved` potvrd√≠ √∫spƒõch, teprve pak m≈Ø≈æe≈° ukonƒçit\n\n"
        "‚ö†Ô∏è REAKCE NA CHYBY:\n"
        "- Chyba p≈ôi `move_across_river`? Zkus jin√©ho pasa≈æ√©ra!\n"
        "- Nejsi si jist? Zavolej `get_current_state`!\n"
        "- NIKDY se nevzd√°vej a V≈ΩDY pokraƒçuj vol√°n√≠m n√°stroj≈Ø!\n\n"
        "üí° KL√çƒåOV√â POZNATKY:\n"
        "- P≈ôevozn√≠k m≈Ø≈æe jet i s√°m (passenger='nothing')\n"
        "- Nƒõkdy mus√≠≈° vz√≠t nƒõkoho zpƒõt na lev√Ω b≈ôeh\n"
        "- Vlk a koza nesm√≠ b√Ωt sami, koza a zel√≠ nesm√≠ b√Ωt sami\n"
    )

    # Vytvo≈ô√≠m tool interface podle nastaven√≠ USE_MCP
    tools_schemas, available_tools, puzzle_env = create_tool_interface(USE_MCP)

    messages = [{"role": "system", "content": system_prompt}]

    print(f"\nMODEL: {MODEL}")
    print(f"USE_MCP: {USE_MCP}\n")

    print("--- START ≈òE≈†EN√ç H√ÅDANKY ---")
    print(f"Poƒç√°teƒçn√≠ stav:\n{puzzle_env.get_state_description()}\n")

    for step in range(1, MAX_STEP + 1):
        print(f"--- KROK {step} ---")

        response = completion(
            model=MODEL,
            messages=messages,
            tools=tools_schemas,
            tool_choice="auto",
        )

        response_message = response.choices[0].message
        messages.append(response_message)

        if response_message.tool_calls:
            for tool_call in response_message.tool_calls:
                function_name = tool_call.function.name
                function_to_call = available_tools[function_name]
                function_args = json.loads(tool_call.function.arguments)

                print(
                    f"Agent navrhuje akci: {function_name} s argumenty {function_args}"
                )

                function_response = function_to_call(**function_args)

                print(f"V√Ωsledek n√°stroje: {function_response}\n")

                messages.append(
                    {
                        "tool_call_id": tool_call.id,
                        "role": "tool",
                        "name": function_name,
                        "content": function_response,
                    }
                )
        else:
            print(f"Agent ukonƒçil pr√°ci a ≈ô√≠k√°: {response_message.content}\n")
            # T√≠mto pr√°ce agenta konƒç√≠ - ji≈æ vratil finaln√≠ odpovƒõd.
            if puzzle_env.is_solved():
                print("üéâ OVƒö≈òENO: Agent h√°danku skuteƒçnƒõ vy≈ôe≈°il!")
            else:
                print(
                    "‚ùå CHYBA: Agent si myslel, ≈æe h√°danku vy≈ôe≈°il (nebo se zasekl), ale neudƒõlal to.")
                print(
                    f"Skuteƒçn√Ω fin√°ln√≠ stav:\n{puzzle_env.get_state_description()}")
            break
    else:
        # Tento blok se spust√≠, pokud smyƒçka dobƒõhla do konce bez 'break'
        print("‚ùå CHYBA: Agentovi se nepoda≈ôilo dokonƒçit √∫kol v dan√©m poƒçtu krok≈Ø (nikdy nep≈ôestal volat n√°stroje).")
