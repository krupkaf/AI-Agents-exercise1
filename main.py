#!/usr/bin/env python
import os
from litellm import completion
from dotenv import load_dotenv
import json
from typing import Literal
import inspect
from docstring_parser import parse
from puzzle_environment import PuzzleEnvironment


class AgentToolbox:
    """
    Obsahuje sadu n√°stroj≈Ø, kter√© m≈Ø≈æe AI agent pou≈æ√≠vat k interakci se svƒõtem.
    """

    def __init__(self, puzzle_env: PuzzleEnvironment):
        self.puzzle_env = puzzle_env

    def get_current_state(self):
        """
        Z√≠sk√° aktu√°ln√≠ stav h√°danky ‚Äì kdo je na kter√©m b≈ôehu a kde je loƒèka.
        """
        print("--- N√°stroj 'get_current_state' byl zavol√°n. ---")
        return self.puzzle_env.get_state_description()

    def move_across_river(
        self, passenger: Literal["wolf", "goat", "cabbage", "nothing"]
    ):
        """
        Pokus√≠ se p≈ôev√©zt pasa≈æ√©ra na druh√Ω b≈ôeh.

        :param passenger: Koho p≈ôev√©zt. Mo≈ænosti jsou 'wolf', 'goat', 'cabbage' nebo 'nothing' (p≈ôevozn√≠k jede s√°m).
        """
        print(
            f"--- N√°stroj 'move_across_river' byl zavol√°n s pasa≈æ√©rem: '{passenger}' ---"
        )
        passenger = passenger.lower()

        success, message = self.puzzle_env.attempt_move(passenger)

        if success:
            response = {
                "status": "√∫spƒõch",
                "popis": message,
                "novy_stav": self.puzzle_env.get_state_description(),
            }
        else:
            response = {"status": "chyba", "duvod": message}

        return json.dumps(response, ensure_ascii=False)

    def check_if_solved(self):
        """
        Zkontroluje, zda byla h√°danka √∫spƒõ≈°nƒõ vy≈ôe≈°ena.
        Tento n√°stroj volej, v≈ædy kdy≈æ si mysl√≠≈°, ≈æe je hadanka vy≈ôe≈°ena, aby jsi si to ovƒõ≈ôil.
        """
        print("--- N√°stroj 'check_if_solved' byl zavol√°n. ---")

        if self.puzzle_env.is_solved():
            return "Potvrzeno. H√°danka je skuteƒçnƒõ vy≈ôe≈°ena. Nyn√≠ m≈Ø≈æe≈° napsat fin√°ln√≠ zpr√°vu."
        else:
            current_state = self.puzzle_env.get_state_description()
            return f"Negativn√≠. H√°danka je≈°tƒõ nen√≠ vy≈ôe≈°ena. Pokraƒçuj v pr√°ci. Aktu√°ln√≠ stav je:\n{current_state}"


def generate_tool_schema(func):
    """
    Generuje OpenAI JSON sch√©ma pro danou funkci pomoc√≠ introspekce.
    """
    # Z√≠sk√°me podpis funkce (parametry, anotace)
    signature = inspect.signature(func)
    # Zparsujeme docstring pro z√≠sk√°n√≠ popis≈Ø
    docstring = parse(func.__doc__)

    # Mapa Python typ≈Ø na JSON Schema typy
    type_mapping = {
        "str": "string",
        "int": "integer",
        "float": "number",
        "bool": "boolean",
    }

    properties = {}
    required = []

    for param in signature.parameters.values():
        param_name = param.name
        param_type_name = (
            param.annotation.__name__
            if hasattr(param.annotation, "__name__")
            else str(param.annotation)
        )

        schema_type = type_mapping.get(param_type_name, "string")

        # Najdeme popis parametru v docstringu
        param_doc = next(
            (d for d in docstring.params if d.arg_name == param_name), None
        )
        description = param_doc.description if param_doc else ""

        properties[param_name] = {
            "type": schema_type, "description": description}

        # Zpracov√°n√≠ typu Literal pro vytvo≈ôen√≠ 'enum'
        if "Literal" in str(param.annotation):
            # Z√≠sk√°me hodnoty z Literal['a', 'b', ...]
            properties[param_name]["enum"] = list(param.annotation.__args__)

        # Pokud parametr nem√° v√Ωchoz√≠ hodnotu, je povinn√Ω
        if param.default is inspect.Parameter.empty:
            required.append(param_name)

    tool_schema = {
        "type": "function",
        "function": {
            "name": func.__name__,
            "description": docstring.short_description,
            "parameters": {
                "type": "object",
                "properties": properties,
                "required": required,
            },
        },
    }
    return tool_schema


if __name__ == "__main__":
    load_dotenv()

    MODEL = (
        os.environ.get("MODEL")
        if os.environ.get("MODEL") is not None
        else "openrouter/openai/gpt-4-turbo"
    )

    MAX_STEP = (
        int(os.environ.get("MAX_STEP"))
        if os.environ.get("MAX_STEP") is not None
        else 15
    )

    system_prompt = (
        "Jsi expert na logick√© h√°danky. Tv√Ωm √∫kolem je vy≈ôe≈°it h√°danku 'Vlk, koza a zel√≠' krok za krokem."
        "C√≠lem je dostat vlka, kozu a zel√≠ na prav√Ω b≈ôeh."
        "NEM√Å≈† vlastn√≠ znalosti o svƒõtƒõ h√°danky. Jedin√Ω zp≈Øsob, jak m≈Ø≈æe≈° interagovat se svƒõtem nebo zji≈°≈•ovat jeho stav, je prost≈ôednictv√≠m poskytnut√Ωch n√°stroj≈Ø."
        "NESM√ç≈† odpov√≠dat p≈ô√≠mo u≈æivateli, dokud nen√≠ √∫kol kompletnƒõ splnƒõn."
        "V≈ΩDY MUS√ç≈† pou≈æ√≠t n√°stroj v ka≈æd√©m kroku, dokud nedos√°hne≈° fin√°ln√≠ho stavu."
        "D≈ÆSLEDNƒö DODR≈ΩUJ TENTO POSTUP MY≈†LEN√ç:"
        "1. Pokud si nejsi jist s aktu√°ln√≠m stavem, nejprve si zjisti aktu√°ln√≠ stav pomoc√≠ n√°stroje `get_current_state`."
        "2. Na z√°kladƒõ stavu, a hlavnƒõ polohy loƒèky, zva≈æ v≈°echny mo≈æn√© platn√© tahy a proveƒè p≈ôesun pomoc√≠ `move_across_river`."
        "3. Pamatuj, ≈æe p≈ôevozn√≠k se m≈Ø≈æe vr√°tit i s√°m! Tah 'move_across_river' s pasa≈æ√©rem 'nothing' je ƒçasto kl√≠ƒçov√Ω."
        "4. Vyber nejlep≈°√≠ tah a proveƒè ho."
        "5. Opakuj, dokud nejsou v≈°echny polo≈æky na prav√©m b≈ôehu."
        "6. Pokud n√°stroj vr√°t√≠ chybu, peƒçlivƒõ si p≈ôeƒçti jej√≠ d≈Øvod a napl√°nuj nov√Ω, spr√°vn√Ω tah. Neopakuj chyby."
    )

    puzzle_env = PuzzleEnvironment()
    toolbox = AgentToolbox(puzzle_env)

    tools_to_register = [toolbox.get_current_state,
                         toolbox.move_across_river, toolbox.check_if_solved]
    tools_schemas = [generate_tool_schema(func) for func in tools_to_register]

    available_tools = {func.__name__: func for func in tools_to_register}

    messages = [{"role": "system", "content": system_prompt}]

    print(f"\nMODEL: {MODEL}\n")

    print("--- START ≈òE≈†EN√ç H√ÅDANKY ---")
    print(f"Poƒç√°teƒçn√≠ stav:\n{puzzle_env.get_state_description()}\n")

    for step in range(1, MAX_STEP + 1):
        print(f"--- KROK {step} ---")

        response = completion(
            model=MODEL,
            messages=messages,
            tools=tools_schemas,
            tool_choice="auto",
        )

        response_message = response.choices[0].message
        messages.append(response_message)

        if response_message.tool_calls:
            for tool_call in response_message.tool_calls:
                function_name = tool_call.function.name
                function_to_call = available_tools[function_name]
                function_args = json.loads(tool_call.function.arguments)

                print(
                    f"Agent navrhuje akci: {function_name} s argumenty {function_args}"
                )

                function_response = function_to_call(**function_args)

                print(f"V√Ωsledek n√°stroje: {function_response}\n")

                messages.append(
                    {
                        "tool_call_id": tool_call.id,
                        "role": "tool",
                        "name": function_name,
                        "content": function_response,
                    }
                )
        else:
            print(f"Agent ukonƒçil pr√°ci a ≈ô√≠k√°: {response_message.content}\n")
            # T√≠mto pr√°ce agenta konƒç√≠ - ji≈æ vratil finaln√≠ odpovƒõd.
            if puzzle_env.is_solved():
                print("üéâ OVƒö≈òENO: Agent h√°danku skuteƒçnƒõ vy≈ôe≈°il!")
            else:
                print(
                    "‚ùå CHYBA: Agent si myslel, ≈æe h√°danku vy≈ôe≈°il (nebo se zasekl), ale neudƒõlal to.")
                print(
                    f"Skuteƒçn√Ω fin√°ln√≠ stav:\n{puzzle_env.get_state_description()}")
            break
    else:
        # Tento blok se spust√≠, pokud smyƒçka dobƒõhla do konce bez 'break'
        print("‚ùå CHYBA: Agentovi se nepoda≈ôilo dokonƒçit √∫kol v dan√©m poƒçtu krok≈Ø (nikdy nep≈ôestal volat n√°stroje).")
