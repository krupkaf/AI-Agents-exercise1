#!/usr/bin/env python
import os
from litellm import completion
from dotenv import load_dotenv
import json
from typing import Literal
import inspect
from docstring_parser import parse
import copy


class PuzzleEnvironment:
    """
    Zapouzd≈ôuje stav a pravidla h√°danky Vlk, koza, zel√≠.
    """

    def __init__(self):
        self.state = {
            "left_bank": {"wolf", "goat", "cabbage"},
            "right_bank": set(),
            "boat_location": "left",
        }

    def get_state_description(self):
        """
        Vr√°t√≠ lidsky ƒçiteln√Ω popis aktu√°ln√≠ho stavu.
        """
        left = ", ".join(sorted(list(self.state["left_bank"]))) or "pr√°zdn√Ω"
        right = ", ".join(sorted(list(self.state["right_bank"]))) or "pr√°zdn√Ω"
        boat = "lev√©m" if self.state["boat_location"] == "left" else "prav√©m"
        return (
            f"Lev√Ω b≈ôeh: [{left}].\n"
            f"Prav√Ω b≈ôeh: [{right}].\n"
            f"Loƒèka s p≈ôevozn√≠kem je na {boat} b≈ôehu."
        )

    def is_valid_state(self, state_to_check):
        """
        Zkontroluje, zda dan√Ω stav neporu≈°uje pravidla.
        Vrac√≠ True, pokud je stav v po≈ô√°dku.
        """
        # Zkontrolujeme lev√Ω b≈ôeh, POKUD je loƒèka na prav√©m
        if state_to_check["boat_location"] == "right":
            if (
                "wolf" in state_to_check["left_bank"]
                and "goat" in state_to_check["left_bank"]
            ):
                return False
            if (
                "goat" in state_to_check["left_bank"]
                and "cabbage" in state_to_check["left_bank"]
            ):
                return False

        # Zkontrolujeme prav√Ω b≈ôeh, POKUD je loƒèka na lev√©m
        if state_to_check["boat_location"] == "left":
            if (
                "wolf" in state_to_check["right_bank"]
                and "goat" in state_to_check["right_bank"]
            ):
                return False
            if (
                "goat" in state_to_check["right_bank"]
                and "cabbage" in state_to_check["right_bank"]
            ):
                return False

        # Pokud ≈æ√°dn√© pravidlo nebylo poru≈°eno
        return True

    def attempt_move(self, passenger: str):
        """
        Pokus√≠ se prov√©st tah. Obsahuje ve≈°kerou logiku a validaci.
        Pokud je tah platn√Ω, zmƒõn√≠ vnit≈ôn√≠ stav.
        Vrac√≠: (bool: √∫spƒõch, str: zpr√°va)
        """
        current_location_key = self.state["boat_location"] + "_bank"

        # 1. Logistick√° kontrola
        if passenger != "nothing" and passenger not in self.state[current_location_key]:
            return (False, f"Pasa≈æ√©r '{passenger}' nen√≠ na stejn√©m b≈ôehu jako loƒèka.")

        # 2. Simulace tahu
        potential_state = copy.deepcopy(self.state)
        target_location_key = (
            "right_bank" if self.state["boat_location"] == "left" else "left_bank"
        )
        potential_state["boat_location"] = (
            "right" if self.state["boat_location"] == "left" else "left"
        )
        if passenger != "nothing":
            potential_state[current_location_key].remove(passenger)
            potential_state[target_location_key].add(passenger)

        # 3. Validace pravidel
        if self.is_valid_state(potential_state):
            # 4. Pokud je v≈°e OK, POTVRD√çME zmƒõnu stavu
            self.state = potential_state
            return (True, f"P≈ôevozn√≠k √∫spƒõ≈°nƒõ p≈ôevezl '{passenger}'.")
        else:
            return (
                False,
                "Tento tah je neplatn√Ω, proto≈æe by vedl k poru≈°en√≠ pravidel. Zkus jin√Ω tah.",
            )

    def is_solved(self):
        return len(self.state["left_bank"]) == 0 and len(self.state["right_bank"]) == 3


class AgentToolbox:
    """
    Obsahuje sadu n√°stroj≈Ø, kter√© m≈Ø≈æe AI agent pou≈æ√≠vat k interakci se svƒõtem.
    """

    def __init__(self, puzzle_env: PuzzleEnvironment):
        self.puzzle_env = puzzle_env

    def get_current_state(self):
        """
        Z√≠sk√° aktu√°ln√≠ stav h√°danky ‚Äì kdo je na kter√©m b≈ôehu a kde je loƒèka.
        """
        print("--- N√°stroj 'get_current_state' byl zavol√°n. ---")
        return self.puzzle_env.get_state_description()

    def move_across_river(
        self, passenger: Literal["wolf", "goat", "cabbage", "nothing"]
    ):
        """
        Pokus√≠ se p≈ôev√©zt pasa≈æ√©ra na druh√Ω b≈ôeh.

        :param passenger: Koho p≈ôev√©zt. Mo≈ænosti jsou 'wolf', 'goat', 'cabbage' nebo 'nothing' (p≈ôevozn√≠k jede s√°m).
        """
        print(
            f"--- N√°stroj 'move_across_river' byl zavol√°n s pasa≈æ√©rem: '{passenger}' ---"
        )
        passenger = passenger.lower()

        success, message = self.puzzle_env.attempt_move(passenger)

        if success:
            response = {
                "status": "√∫spƒõch",
                "popis": message,
                "novy_stav": self.puzzle_env.get_state_description(),
            }
        else:
            response = {"status": "chyba", "duvod": message}

        return json.dumps(response, ensure_ascii=False)


def generate_tool_schema(func):
    """
    Generuje OpenAI JSON sch√©ma pro danou funkci pomoc√≠ introspekce.
    """
    # Z√≠sk√°me podpis funkce (parametry, anotace)
    signature = inspect.signature(func)
    # Zparsujeme docstring pro z√≠sk√°n√≠ popis≈Ø
    docstring = parse(func.__doc__)

    # Mapa Python typ≈Ø na JSON Schema typy
    type_mapping = {
        "str": "string",
        "int": "integer",
        "float": "number",
        "bool": "boolean",
    }

    properties = {}
    required = []

    for param in signature.parameters.values():
        param_name = param.name
        param_type_name = (
            param.annotation.__name__
            if hasattr(param.annotation, "__name__")
            else str(param.annotation)
        )

        schema_type = type_mapping.get(param_type_name, "string")

        # Najdeme popis parametru v docstringu
        param_doc = next(
            (d for d in docstring.params if d.arg_name == param_name), None
        )
        description = param_doc.description if param_doc else ""

        properties[param_name] = {
            "type": schema_type, "description": description}

        # Zpracov√°n√≠ typu Literal pro vytvo≈ôen√≠ 'enum'
        if "Literal" in str(param.annotation):
            # Z√≠sk√°me hodnoty z Literal['a', 'b', ...]
            properties[param_name]["enum"] = list(param.annotation.__args__)

        # Pokud parametr nem√° v√Ωchoz√≠ hodnotu, je povinn√Ω
        if param.default is inspect.Parameter.empty:
            required.append(param_name)

    tool_schema = {
        "type": "function",
        "function": {
            "name": func.__name__,
            "description": docstring.short_description,
            "parameters": {
                "type": "object",
                "properties": properties,
                "required": required,
            },
        },
    }
    return tool_schema


if __name__ == "__main__":
    load_dotenv()

    MODEL = (
        os.environ.get("MODEL")
        if os.environ.get("MODEL") is not None
        else "openrouter/openai/gpt-4-turbo"
    )

    system_prompt = (
        "Jsi expert na logick√© h√°danky. Tv√Ωm √∫kolem je vy≈ôe≈°it h√°danku 'Vlk, koza a zel√≠' krok za krokem."
        "C√≠lem je dostat vlka, kozu a zel√≠ na prav√Ω b≈ôeh."
        "D≈ÆSLEDNƒö DODR≈ΩUJ TENTO POSTUP MY≈†LEN√ç:"
        "1. Pokud si nejsi jist s aktu√°ln√≠m stavem, nejprve si zjisti aktu√°ln√≠ stav pomoc√≠ n√°stroje `get_current_state`."
        "2. Na z√°kladƒõ stavu, a hlavnƒõ polohy loƒèky, zva≈æ v≈°echny mo≈æn√© platn√© tahy."
        "3. Pamatuj, ≈æe p≈ôevozn√≠k se m≈Ø≈æe vr√°tit i s√°m! Tah 'move_across_river' s pasa≈æ√©rem 'nothing' je ƒçasto kl√≠ƒçov√Ω."
        "4. Vyber nejlep≈°√≠ tah a proveƒè ho."
        "5. Pokud n√°stroj vr√°t√≠ chybu, peƒçlivƒõ si p≈ôeƒçti jej√≠ d≈Øvod a napl√°nuj nov√Ω, spr√°vn√Ω tah. Neopakuj chyby."
    )

    puzzle_env = PuzzleEnvironment()
    toolbox = AgentToolbox(puzzle_env)

    tools_to_register = [toolbox.get_current_state, toolbox.move_across_river]
    tools_schemas = [generate_tool_schema(func) for func in tools_to_register]

    available_tools = {func.__name__: func for func in tools_to_register}

    messages = [{"role": "system", "content": system_prompt}]

    print(f"\nMODEL: {MODEL}\n")

    print("--- START ≈òE≈†EN√ç H√ÅDANKY ---")
    print(f"Poƒç√°teƒçn√≠ stav:\n{puzzle_env.get_state_description()}\n")

    max_steps = 15
    for step in range(1, max_steps + 1):
        print(f"--- KROK {step} ---")

        response = completion(
            model=MODEL,
            messages=messages,
            tools=tools_schemas,
            tool_choice="auto",
        )

        response_message = response.choices[0].message
        messages.append(response_message)

        if response_message.tool_calls:
            for tool_call in response_message.tool_calls:
                function_name = tool_call.function.name
                function_to_call = available_tools[function_name]
                function_args = json.loads(tool_call.function.arguments)

                print(
                    f"Agent navrhuje akci: {function_name} s argumenty {function_args}"
                )

                function_response = function_to_call(**function_args)

                print(f"V√Ωsledek n√°stroje: {function_response}\n")

                messages.append(
                    {
                        "tool_call_id": tool_call.id,
                        "role": "tool",
                        "name": function_name,
                        "content": function_response,
                    }
                )
        else:
            print(f"Agent ≈ô√≠k√°: {response_message.content}\n")

        if puzzle_env.is_solved():
            print("üéâ H√ÅDANKA √öSPƒö≈†Nƒö VY≈òE≈†ENA! üéâ")
            print(f"Fin√°ln√≠ stav:\n{puzzle_env.get_state_description()}")
            break
    else:
        print("Agentovi se nepoda≈ôilo vy≈ôe≈°it h√°danku v dan√©m poƒçtu krok≈Ø.")
