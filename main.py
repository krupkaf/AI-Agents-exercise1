#!/usr/bin/env python
import os
from litellm import completion
from dotenv import load_dotenv
import json
from puzzle_environment import PuzzleEnvironment
from agent_tools import AgentToolbox, generate_tool_schema


if __name__ == "__main__":
    load_dotenv()

    MODEL = (
        os.environ.get("MODEL")
        if os.environ.get("MODEL") is not None
        else "openrouter/openai/gpt-4-turbo"
    )

    MAX_STEP = (
        int(os.environ.get("MAX_STEP"))
        if os.environ.get("MAX_STEP") is not None
        else 15
    )

    system_prompt = (
        "Jsi expert na logick√© h√°danky. Tv√Ωm √∫kolem je vy≈ôe≈°it h√°danku 'Vlk, koza a zel√≠' krok za krokem."
        "C√≠lem je dostat vlka, kozu a zel√≠ na prav√Ω b≈ôeh."
        "NEM√Å≈† vlastn√≠ znalosti o svƒõtƒõ h√°danky. Jedin√Ω zp≈Øsob, jak m≈Ø≈æe≈° interagovat se svƒõtem nebo zji≈°≈•ovat jeho stav, je prost≈ôednictv√≠m poskytnut√Ωch n√°stroj≈Ø."
        "NESM√ç≈† odpov√≠dat p≈ô√≠mo u≈æivateli, dokud nen√≠ √∫kol kompletnƒõ splnƒõn."
        "V≈ΩDY MUS√ç≈† pou≈æ√≠t n√°stroj v ka≈æd√©m kroku, dokud nedos√°hne≈° fin√°ln√≠ho stavu."
        "D≈ÆSLEDNƒö DODR≈ΩUJ TENTO POSTUP MY≈†LEN√ç:"
        "1. Pokud si nejsi jist s aktu√°ln√≠m stavem, nejprve si zjisti aktu√°ln√≠ stav pomoc√≠ n√°stroje `get_current_state`."
        "2. Na z√°kladƒõ stavu, a hlavnƒõ polohy loƒèky, zva≈æ v≈°echny mo≈æn√© platn√© tahy a proveƒè p≈ôesun pomoc√≠ `move_across_river`."
        "3. Pamatuj, ≈æe p≈ôevozn√≠k se m≈Ø≈æe vr√°tit i s√°m! Tah 'move_across_river' s pasa≈æ√©rem 'nothing' je ƒçasto kl√≠ƒçov√Ω."
        "4. Vyber nejlep≈°√≠ tah a proveƒè ho."
        "5. Opakuj, dokud nejsou v≈°echny polo≈æky na prav√©m b≈ôehu."
        "6. Pokud n√°stroj vr√°t√≠ chybu, peƒçlivƒõ si p≈ôeƒçti jej√≠ d≈Øvod a napl√°nuj nov√Ω, spr√°vn√Ω tah. Neopakuj chyby."
    )

    puzzle_env = PuzzleEnvironment()
    toolbox = AgentToolbox(puzzle_env)

    tools_to_register = [toolbox.get_current_state,
                         toolbox.move_across_river, toolbox.check_if_solved]
    tools_schemas = [generate_tool_schema(func) for func in tools_to_register]

    available_tools = {func.__name__: func for func in tools_to_register}

    messages = [{"role": "system", "content": system_prompt}]

    print(f"\nMODEL: {MODEL}\n")

    print("--- START ≈òE≈†EN√ç H√ÅDANKY ---")
    print(f"Poƒç√°teƒçn√≠ stav:\n{puzzle_env.get_state_description()}\n")

    for step in range(1, MAX_STEP + 1):
        print(f"--- KROK {step} ---")

        response = completion(
            model=MODEL,
            messages=messages,
            tools=tools_schemas,
            tool_choice="auto",
        )

        response_message = response.choices[0].message
        messages.append(response_message)

        if response_message.tool_calls:
            for tool_call in response_message.tool_calls:
                function_name = tool_call.function.name
                function_to_call = available_tools[function_name]
                function_args = json.loads(tool_call.function.arguments)

                print(
                    f"Agent navrhuje akci: {function_name} s argumenty {function_args}"
                )

                function_response = function_to_call(**function_args)

                print(f"V√Ωsledek n√°stroje: {function_response}\n")

                messages.append(
                    {
                        "tool_call_id": tool_call.id,
                        "role": "tool",
                        "name": function_name,
                        "content": function_response,
                    }
                )
        else:
            print(f"Agent ukonƒçil pr√°ci a ≈ô√≠k√°: {response_message.content}\n")
            # T√≠mto pr√°ce agenta konƒç√≠ - ji≈æ vratil finaln√≠ odpovƒõd.
            if puzzle_env.is_solved():
                print("üéâ OVƒö≈òENO: Agent h√°danku skuteƒçnƒõ vy≈ôe≈°il!")
            else:
                print(
                    "‚ùå CHYBA: Agent si myslel, ≈æe h√°danku vy≈ôe≈°il (nebo se zasekl), ale neudƒõlal to.")
                print(
                    f"Skuteƒçn√Ω fin√°ln√≠ stav:\n{puzzle_env.get_state_description()}")
            break
    else:
        # Tento blok se spust√≠, pokud smyƒçka dobƒõhla do konce bez 'break'
        print("‚ùå CHYBA: Agentovi se nepoda≈ôilo dokonƒçit √∫kol v dan√©m poƒçtu krok≈Ø (nikdy nep≈ôestal volat n√°stroje).")
